/* 
 * ChannelEngine Channel API
 *
 * ChannelEngine API for channels
 *
 * The version of the OpenAPI document: 2.9.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChannelEngine.Channel.ApiClient.Client.OpenAPIDateConverter;

namespace ChannelEngine.Channel.ApiClient.Model
{
    /// <summary>
    /// ChannelOrderRequest
    /// </summary>
    [DataContract]
    public partial class ChannelOrderRequest :  IEquatable<ChannelOrderRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelOrderRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChannelOrderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelOrderRequest" /> class.
        /// </summary>
        /// <param name="billingAddress">billingAddress (required).</param>
        /// <param name="shippingAddress">shippingAddress (required).</param>
        /// <param name="channelOrderNo">The unique order reference used by the Channel. (required).</param>
        /// <param name="isBusinessOrder">Optional. Is a business order (default value is false).  If not provided the VAT Number will be checked. If a VAT Number is found, IsBusinessOrder will be set to true.  No VAT will be calculated when set to true..</param>
        /// <param name="keyIsMerchantProductNo">Optional. Is the MPN used as key for the product (default value is false)..</param>
        /// <param name="lines">The order lines. (required).</param>
        /// <param name="phone">The customer&#39;s telephone number..</param>
        /// <param name="email">The customer&#39;s email. (required).</param>
        /// <param name="companyRegistrationNo">Optional. A company&#39;s chamber of commerce number..</param>
        /// <param name="vatNo">Optional. A company&#39;s VAT number..</param>
        /// <param name="paymentMethod">The payment method used on the order..</param>
        /// <param name="shippingCostsInclVat">The shipping fee including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering). (required).</param>
        /// <param name="currencyCode">The currency code for the amounts of the order. (required).</param>
        /// <param name="orderDate">The date the order was created at the channel. (required).</param>
        /// <param name="channelCustomerNo">The unique customer reference used by the channel..</param>
        /// <param name="extraData">Extra data on the order..</param>
        public ChannelOrderRequest(ChannelAddressRequest billingAddress = default(ChannelAddressRequest), ChannelAddressRequest shippingAddress = default(ChannelAddressRequest), string channelOrderNo = default(string), bool? isBusinessOrder = default(bool?), bool keyIsMerchantProductNo = default(bool), List<ChannelOrderLineRequest> lines = default(List<ChannelOrderLineRequest>), string phone = default(string), string email = default(string), string companyRegistrationNo = default(string), string vatNo = default(string), string paymentMethod = default(string), decimal shippingCostsInclVat = default(decimal), string currencyCode = default(string), DateTime orderDate = default(DateTime), string channelCustomerNo = default(string), Dictionary<string, string> extraData = default(Dictionary<string, string>))
        {
            // to ensure "billingAddress" is required (not null)
            this.BillingAddress = billingAddress ?? throw new ArgumentNullException("billingAddress is a required property for ChannelOrderRequest and cannot be null");
            // to ensure "shippingAddress" is required (not null)
            this.ShippingAddress = shippingAddress ?? throw new ArgumentNullException("shippingAddress is a required property for ChannelOrderRequest and cannot be null");
            // to ensure "channelOrderNo" is required (not null)
            this.ChannelOrderNo = channelOrderNo ?? throw new ArgumentNullException("channelOrderNo is a required property for ChannelOrderRequest and cannot be null");
            // to ensure "lines" is required (not null)
            this.Lines = lines ?? throw new ArgumentNullException("lines is a required property for ChannelOrderRequest and cannot be null");
            // to ensure "email" is required (not null)
            this.Email = email ?? throw new ArgumentNullException("email is a required property for ChannelOrderRequest and cannot be null");
            this.ShippingCostsInclVat = shippingCostsInclVat;
            // to ensure "currencyCode" is required (not null)
            this.CurrencyCode = currencyCode ?? throw new ArgumentNullException("currencyCode is a required property for ChannelOrderRequest and cannot be null");
            this.OrderDate = orderDate;
            this.IsBusinessOrder = isBusinessOrder;
            this.KeyIsMerchantProductNo = keyIsMerchantProductNo;
            this.Phone = phone;
            this.CompanyRegistrationNo = companyRegistrationNo;
            this.VatNo = vatNo;
            this.PaymentMethod = paymentMethod;
            this.ChannelCustomerNo = channelCustomerNo;
            this.ExtraData = extraData;
        }
        
        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name="BillingAddress", EmitDefaultValue=false)]
        public ChannelAddressRequest BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name="ShippingAddress", EmitDefaultValue=false)]
        public ChannelAddressRequest ShippingAddress { get; set; }

        /// <summary>
        /// The unique order reference used by the Channel.
        /// </summary>
        /// <value>The unique order reference used by the Channel.</value>
        [DataMember(Name="ChannelOrderNo", EmitDefaultValue=false)]
        public string ChannelOrderNo { get; set; }

        /// <summary>
        /// Optional. Is a business order (default value is false).  If not provided the VAT Number will be checked. If a VAT Number is found, IsBusinessOrder will be set to true.  No VAT will be calculated when set to true.
        /// </summary>
        /// <value>Optional. Is a business order (default value is false).  If not provided the VAT Number will be checked. If a VAT Number is found, IsBusinessOrder will be set to true.  No VAT will be calculated when set to true.</value>
        [DataMember(Name="IsBusinessOrder", EmitDefaultValue=true)]
        public bool? IsBusinessOrder { get; set; }

        /// <summary>
        /// Optional. Is the MPN used as key for the product (default value is false).
        /// </summary>
        /// <value>Optional. Is the MPN used as key for the product (default value is false).</value>
        [DataMember(Name="KeyIsMerchantProductNo", EmitDefaultValue=false)]
        public bool KeyIsMerchantProductNo { get; set; }

        /// <summary>
        /// The order lines.
        /// </summary>
        /// <value>The order lines.</value>
        [DataMember(Name="Lines", EmitDefaultValue=false)]
        public List<ChannelOrderLineRequest> Lines { get; set; }

        /// <summary>
        /// The customer&#39;s telephone number.
        /// </summary>
        /// <value>The customer&#39;s telephone number.</value>
        [DataMember(Name="Phone", EmitDefaultValue=true)]
        public string Phone { get; set; }

        /// <summary>
        /// The customer&#39;s email.
        /// </summary>
        /// <value>The customer&#39;s email.</value>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Optional. A company&#39;s chamber of commerce number.
        /// </summary>
        /// <value>Optional. A company&#39;s chamber of commerce number.</value>
        [DataMember(Name="CompanyRegistrationNo", EmitDefaultValue=true)]
        public string CompanyRegistrationNo { get; set; }

        /// <summary>
        /// Optional. A company&#39;s VAT number.
        /// </summary>
        /// <value>Optional. A company&#39;s VAT number.</value>
        [DataMember(Name="VatNo", EmitDefaultValue=true)]
        public string VatNo { get; set; }

        /// <summary>
        /// The payment method used on the order.
        /// </summary>
        /// <value>The payment method used on the order.</value>
        [DataMember(Name="PaymentMethod", EmitDefaultValue=true)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// The shipping fee including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).
        /// </summary>
        /// <value>The shipping fee including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).</value>
        [DataMember(Name="ShippingCostsInclVat", EmitDefaultValue=false)]
        public decimal ShippingCostsInclVat { get; set; }

        /// <summary>
        /// The currency code for the amounts of the order.
        /// </summary>
        /// <value>The currency code for the amounts of the order.</value>
        [DataMember(Name="CurrencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The date the order was created at the channel.
        /// </summary>
        /// <value>The date the order was created at the channel.</value>
        [DataMember(Name="OrderDate", EmitDefaultValue=false)]
        public DateTime OrderDate { get; set; }

        /// <summary>
        /// The unique customer reference used by the channel.
        /// </summary>
        /// <value>The unique customer reference used by the channel.</value>
        [DataMember(Name="ChannelCustomerNo", EmitDefaultValue=true)]
        public string ChannelCustomerNo { get; set; }

        /// <summary>
        /// Extra data on the order.
        /// </summary>
        /// <value>Extra data on the order.</value>
        [DataMember(Name="ExtraData", EmitDefaultValue=true)]
        public Dictionary<string, string> ExtraData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelOrderRequest {\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  ChannelOrderNo: ").Append(ChannelOrderNo).Append("\n");
            sb.Append("  IsBusinessOrder: ").Append(IsBusinessOrder).Append("\n");
            sb.Append("  KeyIsMerchantProductNo: ").Append(KeyIsMerchantProductNo).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CompanyRegistrationNo: ").Append(CompanyRegistrationNo).Append("\n");
            sb.Append("  VatNo: ").Append(VatNo).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  ShippingCostsInclVat: ").Append(ShippingCostsInclVat).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  ChannelCustomerNo: ").Append(ChannelCustomerNo).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelOrderRequest);
        }

        /// <summary>
        /// Returns true if ChannelOrderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelOrderRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && 
                (
                    this.ChannelOrderNo == input.ChannelOrderNo ||
                    (this.ChannelOrderNo != null &&
                    this.ChannelOrderNo.Equals(input.ChannelOrderNo))
                ) && 
                (
                    this.IsBusinessOrder == input.IsBusinessOrder ||
                    (this.IsBusinessOrder != null &&
                    this.IsBusinessOrder.Equals(input.IsBusinessOrder))
                ) && 
                (
                    this.KeyIsMerchantProductNo == input.KeyIsMerchantProductNo ||
                    this.KeyIsMerchantProductNo.Equals(input.KeyIsMerchantProductNo)
                ) && 
                (
                    this.Lines == input.Lines ||
                    this.Lines != null &&
                    input.Lines != null &&
                    this.Lines.SequenceEqual(input.Lines)
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.CompanyRegistrationNo == input.CompanyRegistrationNo ||
                    (this.CompanyRegistrationNo != null &&
                    this.CompanyRegistrationNo.Equals(input.CompanyRegistrationNo))
                ) && 
                (
                    this.VatNo == input.VatNo ||
                    (this.VatNo != null &&
                    this.VatNo.Equals(input.VatNo))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.ShippingCostsInclVat == input.ShippingCostsInclVat ||
                    this.ShippingCostsInclVat.Equals(input.ShippingCostsInclVat)
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.ChannelCustomerNo == input.ChannelCustomerNo ||
                    (this.ChannelCustomerNo != null &&
                    this.ChannelCustomerNo.Equals(input.ChannelCustomerNo))
                ) && 
                (
                    this.ExtraData == input.ExtraData ||
                    this.ExtraData != null &&
                    input.ExtraData != null &&
                    this.ExtraData.SequenceEqual(input.ExtraData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillingAddress != null)
                    hashCode = hashCode * 59 + this.BillingAddress.GetHashCode();
                if (this.ShippingAddress != null)
                    hashCode = hashCode * 59 + this.ShippingAddress.GetHashCode();
                if (this.ChannelOrderNo != null)
                    hashCode = hashCode * 59 + this.ChannelOrderNo.GetHashCode();
                if (this.IsBusinessOrder != null)
                    hashCode = hashCode * 59 + this.IsBusinessOrder.GetHashCode();
                hashCode = hashCode * 59 + this.KeyIsMerchantProductNo.GetHashCode();
                if (this.Lines != null)
                    hashCode = hashCode * 59 + this.Lines.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.CompanyRegistrationNo != null)
                    hashCode = hashCode * 59 + this.CompanyRegistrationNo.GetHashCode();
                if (this.VatNo != null)
                    hashCode = hashCode * 59 + this.VatNo.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                hashCode = hashCode * 59 + this.ShippingCostsInclVat.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.OrderDate != null)
                    hashCode = hashCode * 59 + this.OrderDate.GetHashCode();
                if (this.ChannelCustomerNo != null)
                    hashCode = hashCode * 59 + this.ChannelCustomerNo.GetHashCode();
                if (this.ExtraData != null)
                    hashCode = hashCode * 59 + this.ExtraData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ChannelOrderNo (string) maxLength
            if(this.ChannelOrderNo != null && this.ChannelOrderNo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelOrderNo, length must be less than 50.", new [] { "ChannelOrderNo" });
            }

            // ChannelOrderNo (string) minLength
            if(this.ChannelOrderNo != null && this.ChannelOrderNo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelOrderNo, length must be greater than 0.", new [] { "ChannelOrderNo" });
            }

            // Phone (string) maxLength
            if(this.Phone != null && this.Phone.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, length must be less than 50.", new [] { "Phone" });
            }

            // Phone (string) minLength
            if(this.Phone != null && this.Phone.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, length must be greater than 0.", new [] { "Phone" });
            }

            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 250.", new [] { "Email" });
            }

            // Email (string) minLength
            if(this.Email != null && this.Email.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be greater than 0.", new [] { "Email" });
            }

            // CompanyRegistrationNo (string) maxLength
            if(this.CompanyRegistrationNo != null && this.CompanyRegistrationNo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyRegistrationNo, length must be less than 50.", new [] { "CompanyRegistrationNo" });
            }

            // CompanyRegistrationNo (string) minLength
            if(this.CompanyRegistrationNo != null && this.CompanyRegistrationNo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyRegistrationNo, length must be greater than 0.", new [] { "CompanyRegistrationNo" });
            }

            // VatNo (string) maxLength
            if(this.VatNo != null && this.VatNo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VatNo, length must be less than 50.", new [] { "VatNo" });
            }

            // VatNo (string) minLength
            if(this.VatNo != null && this.VatNo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VatNo, length must be greater than 0.", new [] { "VatNo" });
            }

            // PaymentMethod (string) maxLength
            if(this.PaymentMethod != null && this.PaymentMethod.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentMethod, length must be less than 50.", new [] { "PaymentMethod" });
            }

            // PaymentMethod (string) minLength
            if(this.PaymentMethod != null && this.PaymentMethod.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentMethod, length must be greater than 0.", new [] { "PaymentMethod" });
            }

            // CurrencyCode (string) maxLength
            if(this.CurrencyCode != null && this.CurrencyCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyCode, length must be less than 3.", new [] { "CurrencyCode" });
            }

            // ChannelCustomerNo (string) maxLength
            if(this.ChannelCustomerNo != null && this.ChannelCustomerNo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelCustomerNo, length must be less than 50.", new [] { "ChannelCustomerNo" });
            }

            // ChannelCustomerNo (string) minLength
            if(this.ChannelCustomerNo != null && this.ChannelCustomerNo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelCustomerNo, length must be greater than 0.", new [] { "ChannelCustomerNo" });
            }

            yield break;
        }
    }

}
