/* 
 * ChannelEngine Channel API
 *
 * ChannelEngine API for channels
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ChannelEngine.Channel.ApiClient.Client.SwaggerDateConverter;

namespace ChannelEngine.Channel.ApiClient.Model
{
    /// <summary>
    /// ChannelProductExtraDataItemResponse
    /// </summary>
    [DataContract]
    public partial class ChannelProductExtraDataItemResponse :  IEquatable<ChannelProductExtraDataItemResponse>, IValidatableObject
    {
        /// <summary>
        /// Type of the extra data field
        /// </summary>
        /// <value>Type of the extra data field</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum TEXT for value: TEXT
            /// </summary>
            [EnumMember(Value = "TEXT")]
            TEXT = 1,
            
            /// <summary>
            /// Enum NUMBER for value: NUMBER
            /// </summary>
            [EnumMember(Value = "NUMBER")]
            NUMBER = 2,
            
            /// <summary>
            /// Enum URL for value: URL
            /// </summary>
            [EnumMember(Value = "URL")]
            URL = 3,
            
            /// <summary>
            /// Enum IMAGEURL for value: IMAGEURL
            /// </summary>
            [EnumMember(Value = "IMAGEURL")]
            IMAGEURL = 4
        }

        /// <summary>
        /// Type of the extra data field
        /// </summary>
        /// <value>Type of the extra data field</value>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelProductExtraDataItemResponse" /> class.
        /// </summary>
        /// <param name="key">Name of the extra data field.</param>
        /// <param name="value">Value of the extra data field.</param>
        /// <param name="type">Type of the extra data field.</param>
        /// <param name="isPublic">Add this field to the export of the product feed to the channel.</param>
        public ChannelProductExtraDataItemResponse(string key = default(string), string value = default(string), TypeEnum? type = default(TypeEnum?), bool? isPublic = default(bool?))
        {
            this.Key = key;
            this.Value = value;
            this.Type = type;
            this.IsPublic = isPublic;
        }
        
        /// <summary>
        /// Name of the extra data field
        /// </summary>
        /// <value>Name of the extra data field</value>
        [DataMember(Name="Key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Value of the extra data field
        /// </summary>
        /// <value>Value of the extra data field</value>
        [DataMember(Name="Value", EmitDefaultValue=false)]
        public string Value { get; set; }


        /// <summary>
        /// Add this field to the export of the product feed to the channel
        /// </summary>
        /// <value>Add this field to the export of the product feed to the channel</value>
        [DataMember(Name="IsPublic", EmitDefaultValue=false)]
        public bool? IsPublic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelProductExtraDataItemResponse {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelProductExtraDataItemResponse);
        }

        /// <summary>
        /// Returns true if ChannelProductExtraDataItemResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelProductExtraDataItemResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelProductExtraDataItemResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    (this.IsPublic != null &&
                    this.IsPublic.Equals(input.IsPublic))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.IsPublic != null)
                    hashCode = hashCode * 59 + this.IsPublic.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
