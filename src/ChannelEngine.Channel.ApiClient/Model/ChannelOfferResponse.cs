/*
 * ChannelEngine Channel API
 *
 * ChannelEngine API for channels
 *
 * The version of the OpenAPI document: 2.9.10
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChannelEngine.Channel.ApiClient.Client.OpenAPIDateConverter;

namespace ChannelEngine.Channel.ApiClient.Model
{
    /// <summary>
    /// ChannelOfferResponse
    /// </summary>
    [DataContract(Name = "ChannelOfferResponse")]
    public partial class ChannelOfferResponse : IEquatable<ChannelOfferResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelOfferResponse" /> class.
        /// </summary>
        /// <param name="channelProductNo">The unique product reference used by the Channel..</param>
        /// <param name="merchantProductNo">merchantProductNo.</param>
        /// <param name="price">price.</param>
        /// <param name="stock">stock.</param>
        /// <param name="mappedFields">A channel can require certain fields to be available. The channel  can provide ChannelEngine with this fields after which the merchants  will be able to fill in this field using custom conditions in ChannelEngine..</param>
        public ChannelOfferResponse(string channelProductNo = default(string), string merchantProductNo = default(string), decimal price = default(decimal), int stock = default(int), Dictionary<string, string> mappedFields = default(Dictionary<string, string>))
        {
            this.ChannelProductNo = channelProductNo;
            this.MerchantProductNo = merchantProductNo;
            this.Price = price;
            this.Stock = stock;
            this.MappedFields = mappedFields;
        }

        /// <summary>
        /// The unique product reference used by the Channel.
        /// </summary>
        /// <value>The unique product reference used by the Channel.</value>
        [DataMember(Name = "ChannelProductNo", EmitDefaultValue = true)]
        public string ChannelProductNo { get; set; }

        /// <summary>
        /// Gets or Sets MerchantProductNo
        /// </summary>
        [DataMember(Name = "MerchantProductNo", EmitDefaultValue = true)]
        public string MerchantProductNo { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "Price", EmitDefaultValue = false)]
        public decimal Price { get; set; }

        /// <summary>
        /// Gets or Sets Stock
        /// </summary>
        [DataMember(Name = "Stock", EmitDefaultValue = false)]
        public int Stock { get; set; }

        /// <summary>
        /// A channel can require certain fields to be available. The channel  can provide ChannelEngine with this fields after which the merchants  will be able to fill in this field using custom conditions in ChannelEngine.
        /// </summary>
        /// <value>A channel can require certain fields to be available. The channel  can provide ChannelEngine with this fields after which the merchants  will be able to fill in this field using custom conditions in ChannelEngine.</value>
        [DataMember(Name = "MappedFields", EmitDefaultValue = true)]
        public Dictionary<string, string> MappedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelOfferResponse {\n");
            sb.Append("  ChannelProductNo: ").Append(ChannelProductNo).Append("\n");
            sb.Append("  MerchantProductNo: ").Append(MerchantProductNo).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  MappedFields: ").Append(MappedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelOfferResponse);
        }

        /// <summary>
        /// Returns true if ChannelOfferResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelOfferResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelOfferResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChannelProductNo == input.ChannelProductNo ||
                    (this.ChannelProductNo != null &&
                    this.ChannelProductNo.Equals(input.ChannelProductNo))
                ) && 
                (
                    this.MerchantProductNo == input.MerchantProductNo ||
                    (this.MerchantProductNo != null &&
                    this.MerchantProductNo.Equals(input.MerchantProductNo))
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.Stock == input.Stock ||
                    this.Stock.Equals(input.Stock)
                ) && 
                (
                    this.MappedFields == input.MappedFields ||
                    this.MappedFields != null &&
                    input.MappedFields != null &&
                    this.MappedFields.SequenceEqual(input.MappedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChannelProductNo != null)
                    hashCode = hashCode * 59 + this.ChannelProductNo.GetHashCode();
                if (this.MerchantProductNo != null)
                    hashCode = hashCode * 59 + this.MerchantProductNo.GetHashCode();
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                hashCode = hashCode * 59 + this.Stock.GetHashCode();
                if (this.MappedFields != null)
                    hashCode = hashCode * 59 + this.MappedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
