/* 
 * ChannelEngine Channel API
 *
 * ChannelEngine API for channels
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ChannelEngine.Channel.ApiClient.Client.SwaggerDateConverter;

namespace ChannelEngine.Channel.ApiClient.Model
{
    /// <summary>
    /// Address
    /// </summary>
    [DataContract]
    public partial class Address :  IEquatable<Address>
    {
        /// <summary>
        /// Optional. The customer&#39;s gender
        /// </summary>
        /// <value>Optional. The customer&#39;s gender</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenderEnum
        {
            
            /// <summary>
            /// Enum MALE for value: MALE
            /// </summary>
            [EnumMember(Value = "MALE")]
            MALE = 1,
            
            /// <summary>
            /// Enum FEMALE for value: FEMALE
            /// </summary>
            [EnumMember(Value = "FEMALE")]
            FEMALE = 2,
            
            /// <summary>
            /// Enum NOTAPPLICABLE for value: NOT_APPLICABLE
            /// </summary>
            [EnumMember(Value = "NOT_APPLICABLE")]
            NOTAPPLICABLE = 3
        }

        /// <summary>
        /// Optional. The customer&#39;s gender
        /// </summary>
        /// <value>Optional. The customer&#39;s gender</value>
        [DataMember(Name="Gender", EmitDefaultValue=false)]
        public GenderEnum? Gender { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="gender">Optional. The customer&#39;s gender.</param>
        /// <param name="companyName">Optional. Company addressed too..</param>
        /// <param name="firstName">The first name of the customer.</param>
        /// <param name="lastName">The last name of the customer (includes the surname prefix [tussenvoegsel] like &#39;de&#39;, &#39;van&#39;, &#39;du&#39;).</param>
        /// <param name="streetName">The name of the street (without house number information).</param>
        /// <param name="houseNr">The house number.</param>
        /// <param name="houseNrAddition">Optional. Addition to the house number  If the address is: Groenhazengracht 2c, the address will be:  StreetName: Groenhazengracht  HouseNo: 2  HouseNrAddition: c.</param>
        /// <param name="zipCode">The zip or postal code.</param>
        /// <param name="city">The name of the city.</param>
        /// <param name="region">Optional. State/province/region.</param>
        /// <param name="countryIso">For example: NL, BE, FR.</param>
        /// <param name="original">Optional. The address as a single string: use in case the address lines are entered  as single lines and later parsed into street, house number and house number addition..</param>
        public Address(GenderEnum? gender = default(GenderEnum?), string companyName = default(string), string firstName = default(string), string lastName = default(string), string streetName = default(string), string houseNr = default(string), string houseNrAddition = default(string), string zipCode = default(string), string city = default(string), string region = default(string), string countryIso = default(string), string original = default(string))
        {
            this.Gender = gender;
            this.CompanyName = companyName;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.StreetName = streetName;
            this.HouseNr = houseNr;
            this.HouseNrAddition = houseNrAddition;
            this.ZipCode = zipCode;
            this.City = city;
            this.Region = region;
            this.CountryIso = countryIso;
            this.Original = original;
        }
        

        /// <summary>
        /// Optional. Company addressed too.
        /// </summary>
        /// <value>Optional. Company addressed too.</value>
        [DataMember(Name="CompanyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// The first name of the customer
        /// </summary>
        /// <value>The first name of the customer</value>
        [DataMember(Name="FirstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name of the customer (includes the surname prefix [tussenvoegsel] like &#39;de&#39;, &#39;van&#39;, &#39;du&#39;)
        /// </summary>
        /// <value>The last name of the customer (includes the surname prefix [tussenvoegsel] like &#39;de&#39;, &#39;van&#39;, &#39;du&#39;)</value>
        [DataMember(Name="LastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// The name of the street (without house number information)
        /// </summary>
        /// <value>The name of the street (without house number information)</value>
        [DataMember(Name="StreetName", EmitDefaultValue=false)]
        public string StreetName { get; set; }

        /// <summary>
        /// The house number
        /// </summary>
        /// <value>The house number</value>
        [DataMember(Name="HouseNr", EmitDefaultValue=false)]
        public string HouseNr { get; set; }

        /// <summary>
        /// Optional. Addition to the house number  If the address is: Groenhazengracht 2c, the address will be:  StreetName: Groenhazengracht  HouseNo: 2  HouseNrAddition: c
        /// </summary>
        /// <value>Optional. Addition to the house number  If the address is: Groenhazengracht 2c, the address will be:  StreetName: Groenhazengracht  HouseNo: 2  HouseNrAddition: c</value>
        [DataMember(Name="HouseNrAddition", EmitDefaultValue=false)]
        public string HouseNrAddition { get; set; }

        /// <summary>
        /// The zip or postal code
        /// </summary>
        /// <value>The zip or postal code</value>
        [DataMember(Name="ZipCode", EmitDefaultValue=false)]
        public string ZipCode { get; set; }

        /// <summary>
        /// The name of the city
        /// </summary>
        /// <value>The name of the city</value>
        [DataMember(Name="City", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Optional. State/province/region
        /// </summary>
        /// <value>Optional. State/province/region</value>
        [DataMember(Name="Region", EmitDefaultValue=false)]
        public string Region { get; set; }

        /// <summary>
        /// For example: NL, BE, FR
        /// </summary>
        /// <value>For example: NL, BE, FR</value>
        [DataMember(Name="CountryIso", EmitDefaultValue=false)]
        public string CountryIso { get; set; }

        /// <summary>
        /// Optional. The address as a single string: use in case the address lines are entered  as single lines and later parsed into street, house number and house number addition.
        /// </summary>
        /// <value>Optional. The address as a single string: use in case the address lines are entered  as single lines and later parsed into street, house number and house number addition.</value>
        [DataMember(Name="Original", EmitDefaultValue=false)]
        public string Original { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  HouseNr: ").Append(HouseNr).Append("\n");
            sb.Append("  HouseNrAddition: ").Append(HouseNrAddition).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  CountryIso: ").Append(CountryIso).Append("\n");
            sb.Append("  Original: ").Append(Original).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Address);
        }

        /// <summary>
        /// Returns true if Address instances are equal
        /// </summary>
        /// <param name="input">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Address input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                ) && 
                (
                    this.HouseNr == input.HouseNr ||
                    (this.HouseNr != null &&
                    this.HouseNr.Equals(input.HouseNr))
                ) && 
                (
                    this.HouseNrAddition == input.HouseNrAddition ||
                    (this.HouseNrAddition != null &&
                    this.HouseNrAddition.Equals(input.HouseNrAddition))
                ) && 
                (
                    this.ZipCode == input.ZipCode ||
                    (this.ZipCode != null &&
                    this.ZipCode.Equals(input.ZipCode))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.CountryIso == input.CountryIso ||
                    (this.CountryIso != null &&
                    this.CountryIso.Equals(input.CountryIso))
                ) && 
                (
                    this.Original == input.Original ||
                    (this.Original != null &&
                    this.Original.Equals(input.Original))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.StreetName != null)
                    hashCode = hashCode * 59 + this.StreetName.GetHashCode();
                if (this.HouseNr != null)
                    hashCode = hashCode * 59 + this.HouseNr.GetHashCode();
                if (this.HouseNrAddition != null)
                    hashCode = hashCode * 59 + this.HouseNrAddition.GetHashCode();
                if (this.ZipCode != null)
                    hashCode = hashCode * 59 + this.ZipCode.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.CountryIso != null)
                    hashCode = hashCode * 59 + this.CountryIso.GetHashCode();
                if (this.Original != null)
                    hashCode = hashCode * 59 + this.Original.GetHashCode();
                return hashCode;
            }
        }
    }

}
