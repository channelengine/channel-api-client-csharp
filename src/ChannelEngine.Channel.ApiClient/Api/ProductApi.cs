/*
 * ChannelEngine Channel API
 *
 * ChannelEngine API for channels
 *
 * The version of the OpenAPI document: 2.9.8
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ChannelEngine.Channel.ApiClient.Client;
using ChannelEngine.Channel.ApiClient.Model;

namespace ChannelEngine.Channel.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Acknowledge Product Data Changes.
        /// </summary>
        /// <remarks>
        /// This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to&lt;br /&gt;this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last&lt;br /&gt;time they have been updated) and is therefore able to only return the products&lt;br /&gt;that really have changed since the last call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The supplied ChannelReturnNo will be saved&lt;br /&gt;in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;&lt;br /&gt;fields consist of ChannelReferences which are sent in a previous call&lt;br /&gt;within the field &#39;Created&#39;.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelProcessedChangesRequest">The merchant references of the products which have been&lt;br /&gt; successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;). (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ProductAcknowledgeDataChanges(ChannelProcessedChangesRequest channelProcessedChangesRequest = default(ChannelProcessedChangesRequest));

        /// <summary>
        /// Acknowledge Product Data Changes.
        /// </summary>
        /// <remarks>
        /// This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to&lt;br /&gt;this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last&lt;br /&gt;time they have been updated) and is therefore able to only return the products&lt;br /&gt;that really have changed since the last call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The supplied ChannelReturnNo will be saved&lt;br /&gt;in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;&lt;br /&gt;fields consist of ChannelReferences which are sent in a previous call&lt;br /&gt;within the field &#39;Created&#39;.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelProcessedChangesRequest">The merchant references of the products which have been&lt;br /&gt; successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;). (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ProductAcknowledgeDataChangesWithHttpInfo(ChannelProcessedChangesRequest channelProcessedChangesRequest = default(ChannelProcessedChangesRequest));
        /// <summary>
        /// Acknowledge Product Offer Changes.
        /// </summary>
        /// <remarks>
        /// After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the&lt;br /&gt;ChannelProductNo of the products that are successfully updated.&lt;br /&gt;Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.&lt;br /&gt;In advanced cases, the MerchantProductNo is used for this.&lt;br /&gt;In that case, bool keyIsMpn should be true.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyIsMpn">If set to true, changes has to be a list of merchant references instead of channel references. (optional, default to false)</param>
        /// <param name="requestBody">The channel references of the updated products. (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ProductAcknowledgeOfferChanges(bool? keyIsMpn = default(bool?), List<string> requestBody = default(List<string>));

        /// <summary>
        /// Acknowledge Product Offer Changes.
        /// </summary>
        /// <remarks>
        /// After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the&lt;br /&gt;ChannelProductNo of the products that are successfully updated.&lt;br /&gt;Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.&lt;br /&gt;In advanced cases, the MerchantProductNo is used for this.&lt;br /&gt;In that case, bool keyIsMpn should be true.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyIsMpn">If set to true, changes has to be a list of merchant references instead of channel references. (optional, default to false)</param>
        /// <param name="requestBody">The channel references of the updated products. (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ProductAcknowledgeOfferChangesWithHttpInfo(bool? keyIsMpn = default(bool?), List<string> requestBody = default(List<string>));
        /// <summary>
        /// Get Product Data Changes.
        /// </summary>
        /// <remarks>
        /// Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The response contains the products which should be created, updated or removed from the channel.&lt;br /&gt;After the products have been received and processed successfully &#39;v2/products/data&#39; should&lt;br /&gt;be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).&lt;br /&gt;ChannelEngine will save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the&lt;br /&gt;products that really have changes (and therefore should be created, updated or deleted).&lt;br /&gt;A channel willing to integrate with channelengine should therefore only do the following things:&lt;br /&gt; 1. Periodically poll &#39;v2/products/data&#39; for changes.&lt;br /&gt; 2. If any products are returned, save, update or remove these products.&lt;br /&gt; 3. Send the merchant references of the products that have succesfully been processed&lt;br /&gt; in step 2 to POST &#39;v2/products/data&#39;.&lt;br /&gt; &lt;br /&gt;These three simple steps will make sure that the products on the channel will be synchronized&lt;br /&gt;with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer&lt;br /&gt;whose products should be returned. Note that child products are only returned if their parent product&lt;br /&gt;has been acknowledged in a previous transaction. This way ChannelEngine knows the value of&lt;br /&gt;&#39;ChannelParentReference&#39;.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <param name="stripHtml">Optional - strips html by default on all fields (optional, default to true)</param>
        /// <returns>SingleOfChannelProductChangesResponse</returns>
        SingleOfChannelProductChangesResponse ProductGetDataChanges(int? maxCount = default(int?), bool? stripHtml = default(bool?));

        /// <summary>
        /// Get Product Data Changes.
        /// </summary>
        /// <remarks>
        /// Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The response contains the products which should be created, updated or removed from the channel.&lt;br /&gt;After the products have been received and processed successfully &#39;v2/products/data&#39; should&lt;br /&gt;be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).&lt;br /&gt;ChannelEngine will save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the&lt;br /&gt;products that really have changes (and therefore should be created, updated or deleted).&lt;br /&gt;A channel willing to integrate with channelengine should therefore only do the following things:&lt;br /&gt; 1. Periodically poll &#39;v2/products/data&#39; for changes.&lt;br /&gt; 2. If any products are returned, save, update or remove these products.&lt;br /&gt; 3. Send the merchant references of the products that have succesfully been processed&lt;br /&gt; in step 2 to POST &#39;v2/products/data&#39;.&lt;br /&gt; &lt;br /&gt;These three simple steps will make sure that the products on the channel will be synchronized&lt;br /&gt;with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer&lt;br /&gt;whose products should be returned. Note that child products are only returned if their parent product&lt;br /&gt;has been acknowledged in a previous transaction. This way ChannelEngine knows the value of&lt;br /&gt;&#39;ChannelParentReference&#39;.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <param name="stripHtml">Optional - strips html by default on all fields (optional, default to true)</param>
        /// <returns>ApiResponse of SingleOfChannelProductChangesResponse</returns>
        ApiResponse<SingleOfChannelProductChangesResponse> ProductGetDataChangesWithHttpInfo(int? maxCount = default(int?), bool? stripHtml = default(bool?));
        /// <summary>
        /// Get Product Data Changes with an optional product type filter. If you select product type products will be filtered by it.  If you won&#39;t pass product type you will get products with types: CHILD, PARENT, GRANDPARENT, SINGLE
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productType">Optional - Type of products (optional)</param>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <param name="stripHtml">Optional - strips html by default on all fields (optional, default to true)</param>
        /// <returns>SingleOfChannelProductChangesResponse</returns>
        SingleOfChannelProductChangesResponse ProductGetDataChangesFull(DataChangesProductType? productType = default(DataChangesProductType?), int? maxCount = default(int?), bool? stripHtml = default(bool?));

        /// <summary>
        /// Get Product Data Changes with an optional product type filter. If you select product type products will be filtered by it.  If you won&#39;t pass product type you will get products with types: CHILD, PARENT, GRANDPARENT, SINGLE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productType">Optional - Type of products (optional)</param>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <param name="stripHtml">Optional - strips html by default on all fields (optional, default to true)</param>
        /// <returns>ApiResponse of SingleOfChannelProductChangesResponse</returns>
        ApiResponse<SingleOfChannelProductChangesResponse> ProductGetDataChangesFullWithHttpInfo(DataChangesProductType? productType = default(DataChangesProductType?), int? maxCount = default(int?), bool? stripHtml = default(bool?));
        /// <summary>
        /// Get Product Offer Changes.
        /// </summary>
        /// <remarks>
        /// GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;&lt;br /&gt;endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)&lt;br /&gt;therefore be called more often to keep this information (which might change frequently) up to date.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CollectionOfChannelOfferResponse</returns>
        CollectionOfChannelOfferResponse ProductGetOfferChanges();

        /// <summary>
        /// Get Product Offer Changes.
        /// </summary>
        /// <remarks>
        /// GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;&lt;br /&gt;endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)&lt;br /&gt;therefore be called more often to keep this information (which might change frequently) up to date.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CollectionOfChannelOfferResponse</returns>
        ApiResponse<CollectionOfChannelOfferResponse> ProductGetOfferChangesWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Acknowledge Product Data Changes.
        /// </summary>
        /// <remarks>
        /// This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to&lt;br /&gt;this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last&lt;br /&gt;time they have been updated) and is therefore able to only return the products&lt;br /&gt;that really have changed since the last call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The supplied ChannelReturnNo will be saved&lt;br /&gt;in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;&lt;br /&gt;fields consist of ChannelReferences which are sent in a previous call&lt;br /&gt;within the field &#39;Created&#39;.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelProcessedChangesRequest">The merchant references of the products which have been&lt;br /&gt; successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ProductAcknowledgeDataChangesAsync(ChannelProcessedChangesRequest channelProcessedChangesRequest = default(ChannelProcessedChangesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Acknowledge Product Data Changes.
        /// </summary>
        /// <remarks>
        /// This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to&lt;br /&gt;this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last&lt;br /&gt;time they have been updated) and is therefore able to only return the products&lt;br /&gt;that really have changed since the last call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The supplied ChannelReturnNo will be saved&lt;br /&gt;in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;&lt;br /&gt;fields consist of ChannelReferences which are sent in a previous call&lt;br /&gt;within the field &#39;Created&#39;.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelProcessedChangesRequest">The merchant references of the products which have been&lt;br /&gt; successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ProductAcknowledgeDataChangesWithHttpInfoAsync(ChannelProcessedChangesRequest channelProcessedChangesRequest = default(ChannelProcessedChangesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Acknowledge Product Offer Changes.
        /// </summary>
        /// <remarks>
        /// After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the&lt;br /&gt;ChannelProductNo of the products that are successfully updated.&lt;br /&gt;Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.&lt;br /&gt;In advanced cases, the MerchantProductNo is used for this.&lt;br /&gt;In that case, bool keyIsMpn should be true.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyIsMpn">If set to true, changes has to be a list of merchant references instead of channel references. (optional, default to false)</param>
        /// <param name="requestBody">The channel references of the updated products. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ProductAcknowledgeOfferChangesAsync(bool? keyIsMpn = default(bool?), List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Acknowledge Product Offer Changes.
        /// </summary>
        /// <remarks>
        /// After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the&lt;br /&gt;ChannelProductNo of the products that are successfully updated.&lt;br /&gt;Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.&lt;br /&gt;In advanced cases, the MerchantProductNo is used for this.&lt;br /&gt;In that case, bool keyIsMpn should be true.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyIsMpn">If set to true, changes has to be a list of merchant references instead of channel references. (optional, default to false)</param>
        /// <param name="requestBody">The channel references of the updated products. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ProductAcknowledgeOfferChangesWithHttpInfoAsync(bool? keyIsMpn = default(bool?), List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Product Data Changes.
        /// </summary>
        /// <remarks>
        /// Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The response contains the products which should be created, updated or removed from the channel.&lt;br /&gt;After the products have been received and processed successfully &#39;v2/products/data&#39; should&lt;br /&gt;be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).&lt;br /&gt;ChannelEngine will save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the&lt;br /&gt;products that really have changes (and therefore should be created, updated or deleted).&lt;br /&gt;A channel willing to integrate with channelengine should therefore only do the following things:&lt;br /&gt; 1. Periodically poll &#39;v2/products/data&#39; for changes.&lt;br /&gt; 2. If any products are returned, save, update or remove these products.&lt;br /&gt; 3. Send the merchant references of the products that have succesfully been processed&lt;br /&gt; in step 2 to POST &#39;v2/products/data&#39;.&lt;br /&gt; &lt;br /&gt;These three simple steps will make sure that the products on the channel will be synchronized&lt;br /&gt;with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer&lt;br /&gt;whose products should be returned. Note that child products are only returned if their parent product&lt;br /&gt;has been acknowledged in a previous transaction. This way ChannelEngine knows the value of&lt;br /&gt;&#39;ChannelParentReference&#39;.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <param name="stripHtml">Optional - strips html by default on all fields (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleOfChannelProductChangesResponse</returns>
        System.Threading.Tasks.Task<SingleOfChannelProductChangesResponse> ProductGetDataChangesAsync(int? maxCount = default(int?), bool? stripHtml = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Product Data Changes.
        /// </summary>
        /// <remarks>
        /// Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The response contains the products which should be created, updated or removed from the channel.&lt;br /&gt;After the products have been received and processed successfully &#39;v2/products/data&#39; should&lt;br /&gt;be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).&lt;br /&gt;ChannelEngine will save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the&lt;br /&gt;products that really have changes (and therefore should be created, updated or deleted).&lt;br /&gt;A channel willing to integrate with channelengine should therefore only do the following things:&lt;br /&gt; 1. Periodically poll &#39;v2/products/data&#39; for changes.&lt;br /&gt; 2. If any products are returned, save, update or remove these products.&lt;br /&gt; 3. Send the merchant references of the products that have succesfully been processed&lt;br /&gt; in step 2 to POST &#39;v2/products/data&#39;.&lt;br /&gt; &lt;br /&gt;These three simple steps will make sure that the products on the channel will be synchronized&lt;br /&gt;with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer&lt;br /&gt;whose products should be returned. Note that child products are only returned if their parent product&lt;br /&gt;has been acknowledged in a previous transaction. This way ChannelEngine knows the value of&lt;br /&gt;&#39;ChannelParentReference&#39;.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <param name="stripHtml">Optional - strips html by default on all fields (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleOfChannelProductChangesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleOfChannelProductChangesResponse>> ProductGetDataChangesWithHttpInfoAsync(int? maxCount = default(int?), bool? stripHtml = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Product Data Changes with an optional product type filter. If you select product type products will be filtered by it.  If you won&#39;t pass product type you will get products with types: CHILD, PARENT, GRANDPARENT, SINGLE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productType">Optional - Type of products (optional)</param>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <param name="stripHtml">Optional - strips html by default on all fields (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleOfChannelProductChangesResponse</returns>
        System.Threading.Tasks.Task<SingleOfChannelProductChangesResponse> ProductGetDataChangesFullAsync(DataChangesProductType? productType = default(DataChangesProductType?), int? maxCount = default(int?), bool? stripHtml = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Product Data Changes with an optional product type filter. If you select product type products will be filtered by it.  If you won&#39;t pass product type you will get products with types: CHILD, PARENT, GRANDPARENT, SINGLE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productType">Optional - Type of products (optional)</param>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <param name="stripHtml">Optional - strips html by default on all fields (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleOfChannelProductChangesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleOfChannelProductChangesResponse>> ProductGetDataChangesFullWithHttpInfoAsync(DataChangesProductType? productType = default(DataChangesProductType?), int? maxCount = default(int?), bool? stripHtml = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Product Offer Changes.
        /// </summary>
        /// <remarks>
        /// GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;&lt;br /&gt;endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)&lt;br /&gt;therefore be called more often to keep this information (which might change frequently) up to date.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfChannelOfferResponse</returns>
        System.Threading.Tasks.Task<CollectionOfChannelOfferResponse> ProductGetOfferChangesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Product Offer Changes.
        /// </summary>
        /// <remarks>
        /// GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;&lt;br /&gt;endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)&lt;br /&gt;therefore be called more often to keep this information (which might change frequently) up to date.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfChannelOfferResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionOfChannelOfferResponse>> ProductGetOfferChangesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApi : IProductApiSync, IProductApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductApi : IProductApi
    {
        private ChannelEngine.Channel.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductApi(String basePath)
        {
            this.Configuration = ChannelEngine.Channel.ApiClient.Client.Configuration.MergeConfigurations(
                ChannelEngine.Channel.ApiClient.Client.GlobalConfiguration.Instance,
                new ChannelEngine.Channel.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ChannelEngine.Channel.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChannelEngine.Channel.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ChannelEngine.Channel.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductApi(ChannelEngine.Channel.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ChannelEngine.Channel.ApiClient.Client.Configuration.MergeConfigurations(
                ChannelEngine.Channel.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ChannelEngine.Channel.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChannelEngine.Channel.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ChannelEngine.Channel.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProductApi(ChannelEngine.Channel.ApiClient.Client.ISynchronousClient client, ChannelEngine.Channel.ApiClient.Client.IAsynchronousClient asyncClient, ChannelEngine.Channel.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ChannelEngine.Channel.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ChannelEngine.Channel.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ChannelEngine.Channel.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChannelEngine.Channel.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChannelEngine.Channel.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Acknowledge Product Data Changes. This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to&lt;br /&gt;this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last&lt;br /&gt;time they have been updated) and is therefore able to only return the products&lt;br /&gt;that really have changed since the last call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The supplied ChannelReturnNo will be saved&lt;br /&gt;in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;&lt;br /&gt;fields consist of ChannelReferences which are sent in a previous call&lt;br /&gt;within the field &#39;Created&#39;.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelProcessedChangesRequest">The merchant references of the products which have been&lt;br /&gt; successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;). (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ProductAcknowledgeDataChanges(ChannelProcessedChangesRequest channelProcessedChangesRequest = default(ChannelProcessedChangesRequest))
        {
            ChannelEngine.Channel.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = ProductAcknowledgeDataChangesWithHttpInfo(channelProcessedChangesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Acknowledge Product Data Changes. This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to&lt;br /&gt;this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last&lt;br /&gt;time they have been updated) and is therefore able to only return the products&lt;br /&gt;that really have changed since the last call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The supplied ChannelReturnNo will be saved&lt;br /&gt;in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;&lt;br /&gt;fields consist of ChannelReferences which are sent in a previous call&lt;br /&gt;within the field &#39;Created&#39;.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelProcessedChangesRequest">The merchant references of the products which have been&lt;br /&gt; successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;). (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ChannelEngine.Channel.ApiClient.Client.ApiResponse<ApiResponse> ProductAcknowledgeDataChangesWithHttpInfo(ChannelProcessedChangesRequest channelProcessedChangesRequest = default(ChannelProcessedChangesRequest))
        {
            ChannelEngine.Channel.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Channel.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = channelProcessedChangesRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/v2/products/data", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductAcknowledgeDataChanges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Acknowledge Product Data Changes. This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to&lt;br /&gt;this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last&lt;br /&gt;time they have been updated) and is therefore able to only return the products&lt;br /&gt;that really have changed since the last call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The supplied ChannelReturnNo will be saved&lt;br /&gt;in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;&lt;br /&gt;fields consist of ChannelReferences which are sent in a previous call&lt;br /&gt;within the field &#39;Created&#39;.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelProcessedChangesRequest">The merchant references of the products which have been&lt;br /&gt; successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ProductAcknowledgeDataChangesAsync(ChannelProcessedChangesRequest channelProcessedChangesRequest = default(ChannelProcessedChangesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Channel.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = await ProductAcknowledgeDataChangesWithHttpInfoAsync(channelProcessedChangesRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Acknowledge Product Data Changes. This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to&lt;br /&gt;this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last&lt;br /&gt;time they have been updated) and is therefore able to only return the products&lt;br /&gt;that really have changed since the last call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The supplied ChannelReturnNo will be saved&lt;br /&gt;in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;&lt;br /&gt;fields consist of ChannelReferences which are sent in a previous call&lt;br /&gt;within the field &#39;Created&#39;.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelProcessedChangesRequest">The merchant references of the products which have been&lt;br /&gt; successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Channel.ApiClient.Client.ApiResponse<ApiResponse>> ProductAcknowledgeDataChangesWithHttpInfoAsync(ChannelProcessedChangesRequest channelProcessedChangesRequest = default(ChannelProcessedChangesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Channel.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Channel.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = channelProcessedChangesRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/v2/products/data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductAcknowledgeDataChanges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Acknowledge Product Offer Changes. After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the&lt;br /&gt;ChannelProductNo of the products that are successfully updated.&lt;br /&gt;Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.&lt;br /&gt;In advanced cases, the MerchantProductNo is used for this.&lt;br /&gt;In that case, bool keyIsMpn should be true.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyIsMpn">If set to true, changes has to be a list of merchant references instead of channel references. (optional, default to false)</param>
        /// <param name="requestBody">The channel references of the updated products. (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ProductAcknowledgeOfferChanges(bool? keyIsMpn = default(bool?), List<string> requestBody = default(List<string>))
        {
            ChannelEngine.Channel.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = ProductAcknowledgeOfferChangesWithHttpInfo(keyIsMpn, requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Acknowledge Product Offer Changes. After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the&lt;br /&gt;ChannelProductNo of the products that are successfully updated.&lt;br /&gt;Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.&lt;br /&gt;In advanced cases, the MerchantProductNo is used for this.&lt;br /&gt;In that case, bool keyIsMpn should be true.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyIsMpn">If set to true, changes has to be a list of merchant references instead of channel references. (optional, default to false)</param>
        /// <param name="requestBody">The channel references of the updated products. (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ChannelEngine.Channel.ApiClient.Client.ApiResponse<ApiResponse> ProductAcknowledgeOfferChangesWithHttpInfo(bool? keyIsMpn = default(bool?), List<string> requestBody = default(List<string>))
        {
            ChannelEngine.Channel.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Channel.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (keyIsMpn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "keyIsMpn", keyIsMpn));
            }
            localVarRequestOptions.Data = requestBody;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/v2/products/offers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductAcknowledgeOfferChanges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Acknowledge Product Offer Changes. After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the&lt;br /&gt;ChannelProductNo of the products that are successfully updated.&lt;br /&gt;Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.&lt;br /&gt;In advanced cases, the MerchantProductNo is used for this.&lt;br /&gt;In that case, bool keyIsMpn should be true.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyIsMpn">If set to true, changes has to be a list of merchant references instead of channel references. (optional, default to false)</param>
        /// <param name="requestBody">The channel references of the updated products. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ProductAcknowledgeOfferChangesAsync(bool? keyIsMpn = default(bool?), List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Channel.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = await ProductAcknowledgeOfferChangesWithHttpInfoAsync(keyIsMpn, requestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Acknowledge Product Offer Changes. After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the&lt;br /&gt;ChannelProductNo of the products that are successfully updated.&lt;br /&gt;Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.&lt;br /&gt;In advanced cases, the MerchantProductNo is used for this.&lt;br /&gt;In that case, bool keyIsMpn should be true.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyIsMpn">If set to true, changes has to be a list of merchant references instead of channel references. (optional, default to false)</param>
        /// <param name="requestBody">The channel references of the updated products. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Channel.ApiClient.Client.ApiResponse<ApiResponse>> ProductAcknowledgeOfferChangesWithHttpInfoAsync(bool? keyIsMpn = default(bool?), List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Channel.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Channel.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (keyIsMpn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "keyIsMpn", keyIsMpn));
            }
            localVarRequestOptions.Data = requestBody;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/v2/products/offers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductAcknowledgeOfferChanges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Product Data Changes. Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The response contains the products which should be created, updated or removed from the channel.&lt;br /&gt;After the products have been received and processed successfully &#39;v2/products/data&#39; should&lt;br /&gt;be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).&lt;br /&gt;ChannelEngine will save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the&lt;br /&gt;products that really have changes (and therefore should be created, updated or deleted).&lt;br /&gt;A channel willing to integrate with channelengine should therefore only do the following things:&lt;br /&gt; 1. Periodically poll &#39;v2/products/data&#39; for changes.&lt;br /&gt; 2. If any products are returned, save, update or remove these products.&lt;br /&gt; 3. Send the merchant references of the products that have succesfully been processed&lt;br /&gt; in step 2 to POST &#39;v2/products/data&#39;.&lt;br /&gt; &lt;br /&gt;These three simple steps will make sure that the products on the channel will be synchronized&lt;br /&gt;with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer&lt;br /&gt;whose products should be returned. Note that child products are only returned if their parent product&lt;br /&gt;has been acknowledged in a previous transaction. This way ChannelEngine knows the value of&lt;br /&gt;&#39;ChannelParentReference&#39;.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <param name="stripHtml">Optional - strips html by default on all fields (optional, default to true)</param>
        /// <returns>SingleOfChannelProductChangesResponse</returns>
        public SingleOfChannelProductChangesResponse ProductGetDataChanges(int? maxCount = default(int?), bool? stripHtml = default(bool?))
        {
            ChannelEngine.Channel.ApiClient.Client.ApiResponse<SingleOfChannelProductChangesResponse> localVarResponse = ProductGetDataChangesWithHttpInfo(maxCount, stripHtml);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Product Data Changes. Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The response contains the products which should be created, updated or removed from the channel.&lt;br /&gt;After the products have been received and processed successfully &#39;v2/products/data&#39; should&lt;br /&gt;be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).&lt;br /&gt;ChannelEngine will save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the&lt;br /&gt;products that really have changes (and therefore should be created, updated or deleted).&lt;br /&gt;A channel willing to integrate with channelengine should therefore only do the following things:&lt;br /&gt; 1. Periodically poll &#39;v2/products/data&#39; for changes.&lt;br /&gt; 2. If any products are returned, save, update or remove these products.&lt;br /&gt; 3. Send the merchant references of the products that have succesfully been processed&lt;br /&gt; in step 2 to POST &#39;v2/products/data&#39;.&lt;br /&gt; &lt;br /&gt;These three simple steps will make sure that the products on the channel will be synchronized&lt;br /&gt;with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer&lt;br /&gt;whose products should be returned. Note that child products are only returned if their parent product&lt;br /&gt;has been acknowledged in a previous transaction. This way ChannelEngine knows the value of&lt;br /&gt;&#39;ChannelParentReference&#39;.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <param name="stripHtml">Optional - strips html by default on all fields (optional, default to true)</param>
        /// <returns>ApiResponse of SingleOfChannelProductChangesResponse</returns>
        public ChannelEngine.Channel.ApiClient.Client.ApiResponse<SingleOfChannelProductChangesResponse> ProductGetDataChangesWithHttpInfo(int? maxCount = default(int?), bool? stripHtml = default(bool?))
        {
            ChannelEngine.Channel.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Channel.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (maxCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "maxCount", maxCount));
            }
            if (stripHtml != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "stripHtml", stripHtml));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SingleOfChannelProductChangesResponse>("/v2/products/data", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductGetDataChanges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Product Data Changes. Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The response contains the products which should be created, updated or removed from the channel.&lt;br /&gt;After the products have been received and processed successfully &#39;v2/products/data&#39; should&lt;br /&gt;be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).&lt;br /&gt;ChannelEngine will save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the&lt;br /&gt;products that really have changes (and therefore should be created, updated or deleted).&lt;br /&gt;A channel willing to integrate with channelengine should therefore only do the following things:&lt;br /&gt; 1. Periodically poll &#39;v2/products/data&#39; for changes.&lt;br /&gt; 2. If any products are returned, save, update or remove these products.&lt;br /&gt; 3. Send the merchant references of the products that have succesfully been processed&lt;br /&gt; in step 2 to POST &#39;v2/products/data&#39;.&lt;br /&gt; &lt;br /&gt;These three simple steps will make sure that the products on the channel will be synchronized&lt;br /&gt;with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer&lt;br /&gt;whose products should be returned. Note that child products are only returned if their parent product&lt;br /&gt;has been acknowledged in a previous transaction. This way ChannelEngine knows the value of&lt;br /&gt;&#39;ChannelParentReference&#39;.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <param name="stripHtml">Optional - strips html by default on all fields (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleOfChannelProductChangesResponse</returns>
        public async System.Threading.Tasks.Task<SingleOfChannelProductChangesResponse> ProductGetDataChangesAsync(int? maxCount = default(int?), bool? stripHtml = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Channel.ApiClient.Client.ApiResponse<SingleOfChannelProductChangesResponse> localVarResponse = await ProductGetDataChangesWithHttpInfoAsync(maxCount, stripHtml, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Product Data Changes. Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The response contains the products which should be created, updated or removed from the channel.&lt;br /&gt;After the products have been received and processed successfully &#39;v2/products/data&#39; should&lt;br /&gt;be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).&lt;br /&gt;ChannelEngine will save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the&lt;br /&gt;products that really have changes (and therefore should be created, updated or deleted).&lt;br /&gt;A channel willing to integrate with channelengine should therefore only do the following things:&lt;br /&gt; 1. Periodically poll &#39;v2/products/data&#39; for changes.&lt;br /&gt; 2. If any products are returned, save, update or remove these products.&lt;br /&gt; 3. Send the merchant references of the products that have succesfully been processed&lt;br /&gt; in step 2 to POST &#39;v2/products/data&#39;.&lt;br /&gt; &lt;br /&gt;These three simple steps will make sure that the products on the channel will be synchronized&lt;br /&gt;with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer&lt;br /&gt;whose products should be returned. Note that child products are only returned if their parent product&lt;br /&gt;has been acknowledged in a previous transaction. This way ChannelEngine knows the value of&lt;br /&gt;&#39;ChannelParentReference&#39;.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <param name="stripHtml">Optional - strips html by default on all fields (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleOfChannelProductChangesResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Channel.ApiClient.Client.ApiResponse<SingleOfChannelProductChangesResponse>> ProductGetDataChangesWithHttpInfoAsync(int? maxCount = default(int?), bool? stripHtml = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Channel.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Channel.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (maxCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "maxCount", maxCount));
            }
            if (stripHtml != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "stripHtml", stripHtml));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SingleOfChannelProductChangesResponse>("/v2/products/data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductGetDataChanges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Product Data Changes with an optional product type filter. If you select product type products will be filtered by it.  If you won&#39;t pass product type you will get products with types: CHILD, PARENT, GRANDPARENT, SINGLE 
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productType">Optional - Type of products (optional)</param>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <param name="stripHtml">Optional - strips html by default on all fields (optional, default to true)</param>
        /// <returns>SingleOfChannelProductChangesResponse</returns>
        public SingleOfChannelProductChangesResponse ProductGetDataChangesFull(DataChangesProductType? productType = default(DataChangesProductType?), int? maxCount = default(int?), bool? stripHtml = default(bool?))
        {
            ChannelEngine.Channel.ApiClient.Client.ApiResponse<SingleOfChannelProductChangesResponse> localVarResponse = ProductGetDataChangesFullWithHttpInfo(productType, maxCount, stripHtml);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Product Data Changes with an optional product type filter. If you select product type products will be filtered by it.  If you won&#39;t pass product type you will get products with types: CHILD, PARENT, GRANDPARENT, SINGLE 
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productType">Optional - Type of products (optional)</param>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <param name="stripHtml">Optional - strips html by default on all fields (optional, default to true)</param>
        /// <returns>ApiResponse of SingleOfChannelProductChangesResponse</returns>
        public ChannelEngine.Channel.ApiClient.Client.ApiResponse<SingleOfChannelProductChangesResponse> ProductGetDataChangesFullWithHttpInfo(DataChangesProductType? productType = default(DataChangesProductType?), int? maxCount = default(int?), bool? stripHtml = default(bool?))
        {
            ChannelEngine.Channel.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Channel.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (productType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "productType", productType));
            }
            if (maxCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "maxCount", maxCount));
            }
            if (stripHtml != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "stripHtml", stripHtml));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SingleOfChannelProductChangesResponse>("/v2/products/data/full", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductGetDataChangesFull", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Product Data Changes with an optional product type filter. If you select product type products will be filtered by it.  If you won&#39;t pass product type you will get products with types: CHILD, PARENT, GRANDPARENT, SINGLE 
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productType">Optional - Type of products (optional)</param>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <param name="stripHtml">Optional - strips html by default on all fields (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleOfChannelProductChangesResponse</returns>
        public async System.Threading.Tasks.Task<SingleOfChannelProductChangesResponse> ProductGetDataChangesFullAsync(DataChangesProductType? productType = default(DataChangesProductType?), int? maxCount = default(int?), bool? stripHtml = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Channel.ApiClient.Client.ApiResponse<SingleOfChannelProductChangesResponse> localVarResponse = await ProductGetDataChangesFullWithHttpInfoAsync(productType, maxCount, stripHtml, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Product Data Changes with an optional product type filter. If you select product type products will be filtered by it.  If you won&#39;t pass product type you will get products with types: CHILD, PARENT, GRANDPARENT, SINGLE 
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productType">Optional - Type of products (optional)</param>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <param name="stripHtml">Optional - strips html by default on all fields (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleOfChannelProductChangesResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Channel.ApiClient.Client.ApiResponse<SingleOfChannelProductChangesResponse>> ProductGetDataChangesFullWithHttpInfoAsync(DataChangesProductType? productType = default(DataChangesProductType?), int? maxCount = default(int?), bool? stripHtml = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Channel.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Channel.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (productType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "productType", productType));
            }
            if (maxCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "maxCount", maxCount));
            }
            if (stripHtml != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "stripHtml", stripHtml));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SingleOfChannelProductChangesResponse>("/v2/products/data/full", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductGetDataChangesFull", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Product Offer Changes. GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;&lt;br /&gt;endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)&lt;br /&gt;therefore be called more often to keep this information (which might change frequently) up to date.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CollectionOfChannelOfferResponse</returns>
        public CollectionOfChannelOfferResponse ProductGetOfferChanges()
        {
            ChannelEngine.Channel.ApiClient.Client.ApiResponse<CollectionOfChannelOfferResponse> localVarResponse = ProductGetOfferChangesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Product Offer Changes. GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;&lt;br /&gt;endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)&lt;br /&gt;therefore be called more often to keep this information (which might change frequently) up to date.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CollectionOfChannelOfferResponse</returns>
        public ChannelEngine.Channel.ApiClient.Client.ApiResponse<CollectionOfChannelOfferResponse> ProductGetOfferChangesWithHttpInfo()
        {
            ChannelEngine.Channel.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Channel.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionOfChannelOfferResponse>("/v2/products/offers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductGetOfferChanges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Product Offer Changes. GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;&lt;br /&gt;endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)&lt;br /&gt;therefore be called more often to keep this information (which might change frequently) up to date.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfChannelOfferResponse</returns>
        public async System.Threading.Tasks.Task<CollectionOfChannelOfferResponse> ProductGetOfferChangesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Channel.ApiClient.Client.ApiResponse<CollectionOfChannelOfferResponse> localVarResponse = await ProductGetOfferChangesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Product Offer Changes. GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;&lt;br /&gt;endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)&lt;br /&gt;therefore be called more often to keep this information (which might change frequently) up to date.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfChannelOfferResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Channel.ApiClient.Client.ApiResponse<CollectionOfChannelOfferResponse>> ProductGetOfferChangesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Channel.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Channel.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Channel.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Channel.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionOfChannelOfferResponse>("/v2/products/offers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductGetOfferChanges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
