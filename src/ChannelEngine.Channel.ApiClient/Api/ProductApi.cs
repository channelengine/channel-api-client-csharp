/* 
 * ChannelEngine Channel API
 *
 * ChannelEngine API for channels
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using ChannelEngine.Channel.ApiClient.Client;
using ChannelEngine.Channel.ApiClient.Model;

namespace ChannelEngine.Channel.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Acknowledge Product Data Changes
        /// </summary>
        /// <remarks>
        /// This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to  this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last  time they have been updated) and is therefore able to only return the products  that really have changed since the last call to POST &#39;v2/products/data&#39;.  The supplied ChannelReturnNo will be saved  in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;  fields consist of ChannelReferences which are sent in a previous call  within the field &#39;Created&#39;.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changes">The merchant references of the products which have been               successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ProductAcknowledgeDataChanges (ChannelProcessedChangesRequest changes);

        /// <summary>
        /// Acknowledge Product Data Changes
        /// </summary>
        /// <remarks>
        /// This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to  this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last  time they have been updated) and is therefore able to only return the products  that really have changed since the last call to POST &#39;v2/products/data&#39;.  The supplied ChannelReturnNo will be saved  in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;  fields consist of ChannelReferences which are sent in a previous call  within the field &#39;Created&#39;.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changes">The merchant references of the products which have been               successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ProductAcknowledgeDataChangesWithHttpInfo (ChannelProcessedChangesRequest changes);
        /// <summary>
        /// Acknowledge Product Offer Changes
        /// </summary>
        /// <remarks>
        /// After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the  ChannelReturnNo of the products that are successfully updated.  Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changes">The channel references of the updated products</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ProductAcknowledgeOfferChanges (List<string> changes);

        /// <summary>
        /// Acknowledge Product Offer Changes
        /// </summary>
        /// <remarks>
        /// After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the  ChannelReturnNo of the products that are successfully updated.  Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changes">The channel references of the updated products</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ProductAcknowledgeOfferChangesWithHttpInfo (List<string> changes);
        /// <summary>
        /// Get Product Data Changes
        /// </summary>
        /// <remarks>
        /// Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.  The response contains the products which should be created, updated or removed from the channel.  After the products have been received and processed successfully &#39;v2/products/data&#39; should  be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).   ChannelEnginewill save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the  products that really have changes (and therefore should be created, updated or deleted).  A channel willing to integrate with channelengine should therefore only do the following things:      1. Periodically poll &#39;v2/products/data&#39; for changes.      2. If any products are returned, save, update or remove these products.      3. Send the merchant references of the products that have succesfully been processed      in step 2 to POST &#39;v2/products/data&#39;.       These three simple steps will make sure that the products on the channel will be synchronized   with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer  whose products should be returned. Note that child products are only returned if their parent product  has been acknowledged in a previous transaction. This way ChannelEngine knows the value of   &#39;ChannelParentReference&#39;.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field              (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <returns>SingleOfChannelProductChangesResponse</returns>
        SingleOfChannelProductChangesResponse ProductGetDataChanges (int? maxCount = null);

        /// <summary>
        /// Get Product Data Changes
        /// </summary>
        /// <remarks>
        /// Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.  The response contains the products which should be created, updated or removed from the channel.  After the products have been received and processed successfully &#39;v2/products/data&#39; should  be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).   ChannelEnginewill save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the  products that really have changes (and therefore should be created, updated or deleted).  A channel willing to integrate with channelengine should therefore only do the following things:      1. Periodically poll &#39;v2/products/data&#39; for changes.      2. If any products are returned, save, update or remove these products.      3. Send the merchant references of the products that have succesfully been processed      in step 2 to POST &#39;v2/products/data&#39;.       These three simple steps will make sure that the products on the channel will be synchronized   with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer  whose products should be returned. Note that child products are only returned if their parent product  has been acknowledged in a previous transaction. This way ChannelEngine knows the value of   &#39;ChannelParentReference&#39;.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field              (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <returns>ApiResponse of SingleOfChannelProductChangesResponse</returns>
        ApiResponse<SingleOfChannelProductChangesResponse> ProductGetDataChangesWithHttpInfo (int? maxCount = null);
        /// <summary>
        /// Get Product Offer Changes
        /// </summary>
        /// <remarks>
        /// GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;  endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)  therefore be called more often to keep this information (which might change frequently) up to date.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CollectionOfChannelOfferResponse</returns>
        CollectionOfChannelOfferResponse ProductGetOfferChanges ();

        /// <summary>
        /// Get Product Offer Changes
        /// </summary>
        /// <remarks>
        /// GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;  endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)  therefore be called more often to keep this information (which might change frequently) up to date.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CollectionOfChannelOfferResponse</returns>
        ApiResponse<CollectionOfChannelOfferResponse> ProductGetOfferChangesWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Acknowledge Product Data Changes
        /// </summary>
        /// <remarks>
        /// This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to  this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last  time they have been updated) and is therefore able to only return the products  that really have changed since the last call to POST &#39;v2/products/data&#39;.  The supplied ChannelReturnNo will be saved  in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;  fields consist of ChannelReferences which are sent in a previous call  within the field &#39;Created&#39;.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changes">The merchant references of the products which have been               successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ProductAcknowledgeDataChangesAsync (ChannelProcessedChangesRequest changes);

        /// <summary>
        /// Acknowledge Product Data Changes
        /// </summary>
        /// <remarks>
        /// This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to  this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last  time they have been updated) and is therefore able to only return the products  that really have changed since the last call to POST &#39;v2/products/data&#39;.  The supplied ChannelReturnNo will be saved  in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;  fields consist of ChannelReferences which are sent in a previous call  within the field &#39;Created&#39;.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changes">The merchant references of the products which have been               successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;)</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ProductAcknowledgeDataChangesAsyncWithHttpInfo (ChannelProcessedChangesRequest changes);
        /// <summary>
        /// Acknowledge Product Offer Changes
        /// </summary>
        /// <remarks>
        /// After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the  ChannelReturnNo of the products that are successfully updated.  Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changes">The channel references of the updated products</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ProductAcknowledgeOfferChangesAsync (List<string> changes);

        /// <summary>
        /// Acknowledge Product Offer Changes
        /// </summary>
        /// <remarks>
        /// After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the  ChannelReturnNo of the products that are successfully updated.  Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changes">The channel references of the updated products</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ProductAcknowledgeOfferChangesAsyncWithHttpInfo (List<string> changes);
        /// <summary>
        /// Get Product Data Changes
        /// </summary>
        /// <remarks>
        /// Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.  The response contains the products which should be created, updated or removed from the channel.  After the products have been received and processed successfully &#39;v2/products/data&#39; should  be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).   ChannelEnginewill save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the  products that really have changes (and therefore should be created, updated or deleted).  A channel willing to integrate with channelengine should therefore only do the following things:      1. Periodically poll &#39;v2/products/data&#39; for changes.      2. If any products are returned, save, update or remove these products.      3. Send the merchant references of the products that have succesfully been processed      in step 2 to POST &#39;v2/products/data&#39;.       These three simple steps will make sure that the products on the channel will be synchronized   with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer  whose products should be returned. Note that child products are only returned if their parent product  has been acknowledged in a previous transaction. This way ChannelEngine knows the value of   &#39;ChannelParentReference&#39;.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field              (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <returns>Task of SingleOfChannelProductChangesResponse</returns>
        System.Threading.Tasks.Task<SingleOfChannelProductChangesResponse> ProductGetDataChangesAsync (int? maxCount = null);

        /// <summary>
        /// Get Product Data Changes
        /// </summary>
        /// <remarks>
        /// Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.  The response contains the products which should be created, updated or removed from the channel.  After the products have been received and processed successfully &#39;v2/products/data&#39; should  be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).   ChannelEnginewill save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the  products that really have changes (and therefore should be created, updated or deleted).  A channel willing to integrate with channelengine should therefore only do the following things:      1. Periodically poll &#39;v2/products/data&#39; for changes.      2. If any products are returned, save, update or remove these products.      3. Send the merchant references of the products that have succesfully been processed      in step 2 to POST &#39;v2/products/data&#39;.       These three simple steps will make sure that the products on the channel will be synchronized   with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer  whose products should be returned. Note that child products are only returned if their parent product  has been acknowledged in a previous transaction. This way ChannelEngine knows the value of   &#39;ChannelParentReference&#39;.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field              (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <returns>Task of ApiResponse (SingleOfChannelProductChangesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleOfChannelProductChangesResponse>> ProductGetDataChangesAsyncWithHttpInfo (int? maxCount = null);
        /// <summary>
        /// Get Product Offer Changes
        /// </summary>
        /// <remarks>
        /// GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;  endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)  therefore be called more often to keep this information (which might change frequently) up to date.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CollectionOfChannelOfferResponse</returns>
        System.Threading.Tasks.Task<CollectionOfChannelOfferResponse> ProductGetOfferChangesAsync ();

        /// <summary>
        /// Get Product Offer Changes
        /// </summary>
        /// <remarks>
        /// GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;  endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)  therefore be called more often to keep this information (which might change frequently) up to date.
        /// </remarks>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CollectionOfChannelOfferResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionOfChannelOfferResponse>> ProductGetOfferChangesAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductApi : IProductApi
    {
        private ChannelEngine.Channel.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductApi(String basePath)
        {
            this.Configuration = new ChannelEngine.Channel.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ChannelEngine.Channel.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductApi(ChannelEngine.Channel.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ChannelEngine.Channel.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ChannelEngine.Channel.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChannelEngine.Channel.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChannelEngine.Channel.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Acknowledge Product Data Changes This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to  this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last  time they have been updated) and is therefore able to only return the products  that really have changed since the last call to POST &#39;v2/products/data&#39;.  The supplied ChannelReturnNo will be saved  in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;  fields consist of ChannelReferences which are sent in a previous call  within the field &#39;Created&#39;.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changes">The merchant references of the products which have been               successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ProductAcknowledgeDataChanges (ChannelProcessedChangesRequest changes)
        {
             ApiResponse<ApiResponse> localVarResponse = ProductAcknowledgeDataChangesWithHttpInfo(changes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Acknowledge Product Data Changes This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to  this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last  time they have been updated) and is therefore able to only return the products  that really have changed since the last call to POST &#39;v2/products/data&#39;.  The supplied ChannelReturnNo will be saved  in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;  fields consist of ChannelReferences which are sent in a previous call  within the field &#39;Created&#39;.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changes">The merchant references of the products which have been               successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ApiResponse< ApiResponse > ProductAcknowledgeDataChangesWithHttpInfo (ChannelProcessedChangesRequest changes)
        {
            // verify the required parameter 'changes' is set
            if (changes == null)
                throw new ApiException(400, "Missing required parameter 'changes' when calling ProductApi->ProductAcknowledgeDataChanges");

            var localVarPath = "./v2/products/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changes != null && changes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(changes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changes; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductAcknowledgeDataChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
        }

        /// <summary>
        /// Acknowledge Product Data Changes This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to  this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last  time they have been updated) and is therefore able to only return the products  that really have changed since the last call to POST &#39;v2/products/data&#39;.  The supplied ChannelReturnNo will be saved  in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;  fields consist of ChannelReferences which are sent in a previous call  within the field &#39;Created&#39;.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changes">The merchant references of the products which have been               successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ProductAcknowledgeDataChangesAsync (ChannelProcessedChangesRequest changes)
        {
             ApiResponse<ApiResponse> localVarResponse = await ProductAcknowledgeDataChangesAsyncWithHttpInfo(changes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Acknowledge Product Data Changes This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to  this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last  time they have been updated) and is therefore able to only return the products  that really have changed since the last call to POST &#39;v2/products/data&#39;.  The supplied ChannelReturnNo will be saved  in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;  fields consist of ChannelReferences which are sent in a previous call  within the field &#39;Created&#39;.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changes">The merchant references of the products which have been               successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;)</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ProductAcknowledgeDataChangesAsyncWithHttpInfo (ChannelProcessedChangesRequest changes)
        {
            // verify the required parameter 'changes' is set
            if (changes == null)
                throw new ApiException(400, "Missing required parameter 'changes' when calling ProductApi->ProductAcknowledgeDataChanges");

            var localVarPath = "./v2/products/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changes != null && changes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(changes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changes; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductAcknowledgeDataChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
        }

        /// <summary>
        /// Acknowledge Product Offer Changes After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the  ChannelReturnNo of the products that are successfully updated.  Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changes">The channel references of the updated products</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ProductAcknowledgeOfferChanges (List<string> changes)
        {
             ApiResponse<ApiResponse> localVarResponse = ProductAcknowledgeOfferChangesWithHttpInfo(changes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Acknowledge Product Offer Changes After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the  ChannelReturnNo of the products that are successfully updated.  Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changes">The channel references of the updated products</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ApiResponse< ApiResponse > ProductAcknowledgeOfferChangesWithHttpInfo (List<string> changes)
        {
            // verify the required parameter 'changes' is set
            if (changes == null)
                throw new ApiException(400, "Missing required parameter 'changes' when calling ProductApi->ProductAcknowledgeOfferChanges");

            var localVarPath = "./v2/products/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changes != null && changes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(changes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changes; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductAcknowledgeOfferChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
        }

        /// <summary>
        /// Acknowledge Product Offer Changes After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the  ChannelReturnNo of the products that are successfully updated.  Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changes">The channel references of the updated products</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ProductAcknowledgeOfferChangesAsync (List<string> changes)
        {
             ApiResponse<ApiResponse> localVarResponse = await ProductAcknowledgeOfferChangesAsyncWithHttpInfo(changes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Acknowledge Product Offer Changes After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the  ChannelReturnNo of the products that are successfully updated.  Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changes">The channel references of the updated products</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ProductAcknowledgeOfferChangesAsyncWithHttpInfo (List<string> changes)
        {
            // verify the required parameter 'changes' is set
            if (changes == null)
                throw new ApiException(400, "Missing required parameter 'changes' when calling ProductApi->ProductAcknowledgeOfferChanges");

            var localVarPath = "./v2/products/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changes != null && changes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(changes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changes; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductAcknowledgeOfferChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
        }

        /// <summary>
        /// Get Product Data Changes Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.  The response contains the products which should be created, updated or removed from the channel.  After the products have been received and processed successfully &#39;v2/products/data&#39; should  be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).   ChannelEnginewill save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the  products that really have changes (and therefore should be created, updated or deleted).  A channel willing to integrate with channelengine should therefore only do the following things:      1. Periodically poll &#39;v2/products/data&#39; for changes.      2. If any products are returned, save, update or remove these products.      3. Send the merchant references of the products that have succesfully been processed      in step 2 to POST &#39;v2/products/data&#39;.       These three simple steps will make sure that the products on the channel will be synchronized   with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer  whose products should be returned. Note that child products are only returned if their parent product  has been acknowledged in a previous transaction. This way ChannelEngine knows the value of   &#39;ChannelParentReference&#39;.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field              (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <returns>SingleOfChannelProductChangesResponse</returns>
        public SingleOfChannelProductChangesResponse ProductGetDataChanges (int? maxCount = null)
        {
             ApiResponse<SingleOfChannelProductChangesResponse> localVarResponse = ProductGetDataChangesWithHttpInfo(maxCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Product Data Changes Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.  The response contains the products which should be created, updated or removed from the channel.  After the products have been received and processed successfully &#39;v2/products/data&#39; should  be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).   ChannelEnginewill save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the  products that really have changes (and therefore should be created, updated or deleted).  A channel willing to integrate with channelengine should therefore only do the following things:      1. Periodically poll &#39;v2/products/data&#39; for changes.      2. If any products are returned, save, update or remove these products.      3. Send the merchant references of the products that have succesfully been processed      in step 2 to POST &#39;v2/products/data&#39;.       These three simple steps will make sure that the products on the channel will be synchronized   with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer  whose products should be returned. Note that child products are only returned if their parent product  has been acknowledged in a previous transaction. This way ChannelEngine knows the value of   &#39;ChannelParentReference&#39;.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field              (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <returns>ApiResponse of SingleOfChannelProductChangesResponse</returns>
        public ApiResponse< SingleOfChannelProductChangesResponse > ProductGetDataChangesWithHttpInfo (int? maxCount = null)
        {

            var localVarPath = "./v2/products/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxCount", maxCount)); // query parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductGetDataChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleOfChannelProductChangesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SingleOfChannelProductChangesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleOfChannelProductChangesResponse)));
        }

        /// <summary>
        /// Get Product Data Changes Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.  The response contains the products which should be created, updated or removed from the channel.  After the products have been received and processed successfully &#39;v2/products/data&#39; should  be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).   ChannelEnginewill save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the  products that really have changes (and therefore should be created, updated or deleted).  A channel willing to integrate with channelengine should therefore only do the following things:      1. Periodically poll &#39;v2/products/data&#39; for changes.      2. If any products are returned, save, update or remove these products.      3. Send the merchant references of the products that have succesfully been processed      in step 2 to POST &#39;v2/products/data&#39;.       These three simple steps will make sure that the products on the channel will be synchronized   with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer  whose products should be returned. Note that child products are only returned if their parent product  has been acknowledged in a previous transaction. This way ChannelEngine knows the value of   &#39;ChannelParentReference&#39;.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field              (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <returns>Task of SingleOfChannelProductChangesResponse</returns>
        public async System.Threading.Tasks.Task<SingleOfChannelProductChangesResponse> ProductGetDataChangesAsync (int? maxCount = null)
        {
             ApiResponse<SingleOfChannelProductChangesResponse> localVarResponse = await ProductGetDataChangesAsyncWithHttpInfo(maxCount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Product Data Changes Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.  The response contains the products which should be created, updated or removed from the channel.  After the products have been received and processed successfully &#39;v2/products/data&#39; should  be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).   ChannelEnginewill save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the  products that really have changes (and therefore should be created, updated or deleted).  A channel willing to integrate with channelengine should therefore only do the following things:      1. Periodically poll &#39;v2/products/data&#39; for changes.      2. If any products are returned, save, update or remove these products.      3. Send the merchant references of the products that have succesfully been processed      in step 2 to POST &#39;v2/products/data&#39;.       These three simple steps will make sure that the products on the channel will be synchronized   with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer  whose products should be returned. Note that child products are only returned if their parent product  has been acknowledged in a previous transaction. This way ChannelEngine knows the value of   &#39;ChannelParentReference&#39;.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxCount">Optional - limit the amount of products returned for each field              (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)</param>
        /// <returns>Task of ApiResponse (SingleOfChannelProductChangesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SingleOfChannelProductChangesResponse>> ProductGetDataChangesAsyncWithHttpInfo (int? maxCount = null)
        {

            var localVarPath = "./v2/products/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxCount", maxCount)); // query parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductGetDataChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleOfChannelProductChangesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SingleOfChannelProductChangesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleOfChannelProductChangesResponse)));
        }

        /// <summary>
        /// Get Product Offer Changes GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;  endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)  therefore be called more often to keep this information (which might change frequently) up to date.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CollectionOfChannelOfferResponse</returns>
        public CollectionOfChannelOfferResponse ProductGetOfferChanges ()
        {
             ApiResponse<CollectionOfChannelOfferResponse> localVarResponse = ProductGetOfferChangesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Product Offer Changes GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;  endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)  therefore be called more often to keep this information (which might change frequently) up to date.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CollectionOfChannelOfferResponse</returns>
        public ApiResponse< CollectionOfChannelOfferResponse > ProductGetOfferChangesWithHttpInfo ()
        {

            var localVarPath = "./v2/products/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductGetOfferChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionOfChannelOfferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CollectionOfChannelOfferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionOfChannelOfferResponse)));
        }

        /// <summary>
        /// Get Product Offer Changes GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;  endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)  therefore be called more often to keep this information (which might change frequently) up to date.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CollectionOfChannelOfferResponse</returns>
        public async System.Threading.Tasks.Task<CollectionOfChannelOfferResponse> ProductGetOfferChangesAsync ()
        {
             ApiResponse<CollectionOfChannelOfferResponse> localVarResponse = await ProductGetOfferChangesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Product Offer Changes GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;  endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)  therefore be called more often to keep this information (which might change frequently) up to date.
        /// </summary>
        /// <exception cref="ChannelEngine.Channel.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CollectionOfChannelOfferResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionOfChannelOfferResponse>> ProductGetOfferChangesAsyncWithHttpInfo ()
        {

            var localVarPath = "./v2/products/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductGetOfferChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionOfChannelOfferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CollectionOfChannelOfferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionOfChannelOfferResponse)));
        }

    }
}
